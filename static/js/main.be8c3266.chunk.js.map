{"version":3,"sources":["Header.js","Chart.js","Grid.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","_options","label","value","dataField","ylabel","options","map","x","ControlPanel","avg","data","layout","selected","onChange","selectedChanged","ChartContainer","React","useState","setSelected","selectedOption","find","filterBy","filter","cumVal","reduce","acc","cur","prefix","split","suffix","N","length","avgVal","Math","round","Fragment","e","text","type","xField","yField","markers","visible","border","color","background","render","point","title","position","ResultsGrid","skip","take","paging","setPaging","slice","pageable","onPageChange","page","pageSize","total","filterable","onFilterChange","setFilter","field","format","Tabs","ninety","window","innerWidth","widthChanged","setWidth","width","useEffect","addEventListener","_","removeEventListener","onSelect","style","Main","Footer","href","target","rel","App","logic","filters","cooked","result","newResult","dateTime","Date","timestamp","download","megabytes","bytes","upload","sort","a","b","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be8c3266.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport const Header = (props) => {\n  return (\n    <header className=\"Header\">\n      <div className=\"Header-text-container\">\n        <div>\n          <h1>Barkley Lake Speedtests</h1>\n          <p>Measured from: 2219 County Route 47, Salem, NY</p>\n        </div>\n      </div>\n    </header>\n  );\n};\n","import React from 'react';\nimport {\n      Chart,\n      ChartYAxis,\n      ChartYAxisItem,\n      ChartLegend,\n      ChartSeries,\n      ChartSeriesItem,\n      ChartSeriesItemTooltip,\n      ChartTitle\n} from '@progress/kendo-react-charts';\nimport 'hammerjs';\nimport { RadioGroup } from '@progress/kendo-react-inputs';\n\nimport { filterBy } from '@progress/kendo-data-query';\n\nconst _options = [\n  {label: 'Download', value: 'download', dataField: 'download.megabytes', ylabel: 'Speed (MB/sec)'},\n  {label: 'Upload', value: 'upload', dataField: 'upload.megabytes', ylabel: 'Speed (MB/sec)'},\n  {label: 'Ping', value: 'ping', dataField: 'ping.latency', ylabel: 'Latency (ms)'}\n];\n\nconst options = _options.map(x => { return { label: x.label, value: x.value }});\n\nconst ControlPanel = (props) => {\n  return (\n    <div className=\"ControlPanel\">\n      <div className=\"ControlPanel-control\">\n        <strong>Avg. Value:&nbsp;</strong>\n        {props.avg}\n      </div>\n      <div className=\"ControlPanel-control\">\n        <RadioGroup\n         data={options}\n         layout=\"horizontal\"\n         value={props.selected}\n         onChange={props.selectedChanged}\n        />\n      </div>\n    </div>\n  );\n};\n\n\nexport const ChartContainer = (props) => {\n  const [selected, setSelected] = React.useState('download');\n  const selectedOption = _options.find(x => x.value === selected);\n  const data = filterBy(props.data, props.filter);\n  const cumVal = data.reduce((acc, cur) => {\n    const prefix = selectedOption.dataField.split(\".\")[0];\n    const suffix = selectedOption.dataField.split(\".\")[1];\n    acc += cur[prefix][suffix];\n    return acc;\n  }, 0);\n  const N = data.length;\n  const avgVal = Math.round(cumVal / N * 100) / 100;\n\n  const selectedChanged = (e) => {\n    setSelected(e.value);\n  };\n\n  return (\n    <React.Fragment>\n      <ControlPanel\n       selected={selected}\n       selectedChanged={selectedChanged}\n       avg={avgVal}\n       />\n      <Chart>\n        <ChartTitle text=\"Historical Speedtest Results\" />\n        <ChartSeries>\n          <ChartSeriesItem\n            type=\"scatter\"\n            data={data}\n            xField=\"dateTime\"\n            yField={selectedOption.dataField}\n            markers={{ visible: true, border: {color: 'darkgreen' } }}\n            >\n            <ChartSeriesItemTooltip background=\"darkgreen\" render={({ point }) => (<h1>foo</h1>)} />\n          </ChartSeriesItem>\n        </ChartSeries>\n        <ChartYAxis>\n          <ChartYAxisItem title={{ text: selectedOption.ylabel }} />\n        </ChartYAxis>\n        <ChartLegend position=\"top\" />\n      </Chart>\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport { Grid, GridColumn as Column } from '@progress/kendo-react-grid';\nimport { filterBy } from '@progress/kendo-data-query';\n\n\nexport const ResultsGrid = (props) => {\n  const [paging, setPaging] = React.useState({\n    skip: 0,\n    take: 10,\n  });\n\n  const pageChanged = (e) => {\n    setPaging({skip: e.page.skip, take: e.page.take});\n  };\n\n  const filterChanged = (e) => {\n    props.setFilter(e.filter);\n  };\n\n  return (\n    <Grid\n    data={filterBy(props.data, props.filter).slice(paging.skip, paging.take + paging.skip)}\n    pageable={true}\n    onPageChange={pageChanged} \n    skip={paging.skip}\n    pageSize={paging.take}\n    total={filterBy(props.data, props.filter).length}\n    filterable={true}\n    filter={props.filter}\n    onFilterChange={filterChanged}\n    >\n      <Column field=\"dateTime\" title=\"Date/Time\" format=\"{0:g}\" filter=\"date\" />\n      <Column field=\"ping.latency\" title=\"Ping (ms)\" />\n      <Column field=\"download.megabytes\" title=\"Download (mbps)\" />\n      <Column field=\"upload.megabytes\" title=\"Upload (mbps)\" />\n    </Grid>\n  );\n};\n","import React from 'react';\nimport { TabStrip, TabStripTab } from '@progress/kendo-react-layout';\nimport { ChartContainer } from './Chart.js';\nimport { ResultsGrid } from './Grid.js';\n\n\nconst Tabs = (props) => {\n  const tabChanged = (e) => {\n    setSelected(e.selected);\n  };\n\n  const ninety = () => {\n    return window.innerWidth * 0.9;\n  };\n\n  const widthChanged = () => {\n    setWidth(ninety() + 'px');\n  };\n\n  const [selected, setSelected] = React.useState(0);\n  const [width, setWidth] = React.useState(ninety() + 'px');\n\n  React.useEffect(() => {\n    window.addEventListener('resize', widthChanged);\n    return _ => {window.removeEventListener('resize', widthChanged)};\n  });\n\n  return (\n    <TabStrip selected={selected} onSelect={tabChanged} className=\"Tabs\">\n      <TabStripTab title=\"Graph\">\n        <div className=\"ChartContainer\" style={{ width: width }}>\n          <ChartContainer\n            data={props.data}\n            filter={props.filter}\n           />\n         </div>\n      </TabStripTab>\n      <TabStripTab title=\"Data\">\n        <ResultsGrid\n          data={props.data}\n          filter={props.filter}\n         />\n      </TabStripTab>\n    </TabStrip>\n  );\n};\n\nexport const Main = (props) => {\n  return (\n    <main className=\"Main\">\n      <Tabs \n        data={props.data}\n        filter={props.filter}\n       />\n    </main>\n  );\n};\n","import React from 'react';\n\n\nexport const Footer = (props) => {\n  return (\n    <footer className=\"Footer\">\n      <div className=\"Footer-container\">\n        Powered by:&nbsp;\n         <a href=\"http://waiteperspectives.com\" target=\"_blank\" rel=\"noopener noreferrer\">Waite Perspectives, LLC</a>\n      </div>\n    </footer>\n  );\n};\n","import React from 'react';\nimport './App.scss';\n\nimport { Header } from './Header.js';\nimport { Main } from './Main.js';\nimport { Footer } from './Footer.js';\n\nimport data from \"./data.json\";\n\nconst App = () => {\n  const [filter] = React.useState({\n    logic: 'and',\n    filters: []\n  });\n\n  const cooked = data.map(result => {\n    let newResult = {...result};\n    newResult.dateTime = new Date(result.timestamp);\n    newResult.download.megabytes = newResult.download.bytes / 1000000;\n    newResult.upload.megabytes = newResult.upload.bytes / 1000000;\n    return newResult;\n  }).sort((a, b) => b.dateTime > a.dateTime ? 1 : -1);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main \n       data={cooked}\n       filter={filter}\n       />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}